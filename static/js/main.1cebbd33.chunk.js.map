{"version":3,"sources":["components/Counter.js","serviceWorker.js","index.js"],"names":["Counter","props","state","n","numberCap","value","factorial","fibonacci","handleChange","bind","handleButton","handleReset","updateCalculators","onSubmit","event","this","setState","target","e","parseInt","document","getElementById","calculateFactorial","calculateFibonnaci","i","result","numberList","push","length","style","boxShadow","marginBottom","paddingBottom","className","display","onClick","type","id","name","autoComplete","placeholder","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1cebbd33.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/AddButton.css';\r\nimport '../css/Input.css';\r\n\r\nclass Counter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {n: 0, numberCap: \"10\", value: \"\", factorial: 1, fibonacci: \"0\"};\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleButton = this.handleButton.bind(this);\r\n        this.handleReset = this.handleReset.bind(this);\r\n        this.updateCalculators = this.updateCalculators.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n    \r\n    handleChange(event) {\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    handleButton(e) {\r\n        if (this.state.n < parseInt(this.state.numberCap)) {\r\n            this.setState({ n: this.state.n + 1 });\r\n            this.updateCalculators(this.state.n + 1);\r\n        }\r\n    }\r\n    \r\n    handleReset(e) {\r\n        this.setState({ n: 0 });\r\n        this.updateCalculators(0);\r\n    }\r\n    \r\n    onSubmit(e) {\r\n        if (this.state.value === \"\") {\r\n            if (this.state.n > 10) {\r\n                this.setState({ n: 10 });\r\n            }\r\n            this.setState({ numberCap: 10 });\r\n            this.updateCalculators(10);\r\n\r\n            document.getElementById(\"numberCapInput\").value = \"\";\r\n            this.setState({value: \"\"});\r\n            return;\r\n        }\r\n\r\n        if (this.state.n > parseInt(this.state.value)) {\r\n            this.setState({ n: parseInt(this.state.value) });\r\n            this.updateCalculators(parseInt(this.state.value));\r\n        }\r\n\r\n        this.setState({ numberCap: parseInt(this.state.value) });\r\n        this.setState({value: \"\"});\r\n        document.getElementById(\"numberCapInput\").value = \"\";\r\n    }\r\n\r\n    updateCalculators(n) {\r\n        this.setState({ factorial: this.calculateFactorial(n) });\r\n        this.setState({ fibonacci: this.calculateFibonnaci(n) });\r\n    }\r\n\r\n    calculateFactorial(n) {\r\n        var i;\r\n        var result = 1;\r\n        \r\n        for (i = 1; i <= n; i++) {\r\n            result *= i;\r\n        }\r\n        \r\n        return result;\r\n    }\r\n\r\n    calculateFibonnaci(n) {\r\n        var i;\r\n        var numberList = [0, 1];\r\n\r\n        for (i = 0; i < n; i++) {\r\n            numberList.push(numberList[numberList.length - 1] + numberList[numberList.length - 2]);\r\n        }\r\n\r\n        return numberList[n];\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n                <div style={{boxShadow: \"1px 2px 5px 1px #1d1d1d\", marginBottom: \"10px\", paddingBottom: \"5px\"}}>\r\n                    <span className=\"TitleText\">A Counter</span>\r\n                </div>\r\n\r\n                <div style={{display: \"flex\"}}>\r\n                    <div style={{display: \"flex\"}}>\r\n                        <button className=\"ButtonAdd\" onClick={this.handleButton}>{this.state.n}</button>\r\n                        <button className=\"ButtonReset\" onClick={this.handleReset}>Reset</button>\r\n                    </div>\r\n                    <div style={{display: \"flex\"}}>\r\n                        <input type=\"text\" id=\"numberCapInput\" name=\"numberCap\" autoComplete=\"off\" placeholder=\"Set the number cap!\" onChange={this.handleChange} className=\"Input\" />\r\n                        <button className=\"SubmitButton\" onClick={this.onSubmit}>Apply</button>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div style={{display: \"flex\"}}>\r\n                    <div>\r\n                        <span className=\"LabelText\">Factorial</span>\r\n                        <span className=\"LabelText\">{this.state.factorial}</span>\r\n                    </div>\r\n                    <div>\r\n                        <span className=\"LabelText\">Fibonacci</span>\r\n                        <span className=\"LabelText\">{this.state.fibonacci}</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <span className=\"TipText\">Tip: You can leave the number cap field empty and clicking apply will reset it to 10.</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Counter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Counter from './components/Counter';\nimport * as serviceWorker from './serviceWorker';\nimport './css/Input.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Counter />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}